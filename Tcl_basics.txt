Sintassi TCL:

****per eseguire gli script dall'interprete tclsh: #!/usr/bin/tclsh****
****l'interprete tclsh deve essere installato su ubuntu: sudo apt-get install tclsh

{}-->Interpolazione eseguita dal comando
""-->Interpolazione eseguita prima del comando 
[]-->Restituisce risultato del comando [command]
$x-->Restituisce il valore della variabile x-->passaggio parametro per valore

1) Variabili:
	set name "Luca"
	set surname "Dalmasso"
	puts "${name}-${surname}"
	puts "$name $surname"
	puts {"$name $surname"}
	puts "{$name $surname}"

2) Metodi per stringhe:
	string length "stringa"
	string length $STRINGA
	string index "stringa" numero
	string index $stringa $numero
	split $stringa ?splitchars?--> result is saved in a list
	set line "123.2 ddd 5 c"
	scan $line "%f %s %d %c" item1 item2 item3 item4

3) Metodi liste:
	set mylist {item1 item2 item3 item4 ..}
	lidex $mylist" 0..1..2..end
	llength $mylist
	lsort ?-index index_dictionary? ?-increasing/decreasing? list 
	foreach item $mylist {
		-comandi
	}
	lappend mylist "item" "item" ...
	lsearch ?options? $list pattern:  searches the elements of list to see if one of them matches pattern. 
		If so, the command returns the index of the first matching element.
		or, if not, the command returns -1	
3) Expr
	set x [expr{$x +1}]

4) if then else:
	if {condizione} {
		-comandi
	}elseif {condition} {
		-comandi
	}else {
		-comandi
	}


5) while:
	while {condizione} {
		-comandi
	}

6) for:
	for {set i 0} {$i<10} {incr i} {
		-comandi
	}
	
7) Regex:
	(...)--> group
	[...]--> classes of chars
	es: [A-Z]+ = "match every set of chars that constain UpLetters one or more times"
	
	Metachars:
	
	\d = [0-9]
	\w = [a-zA-Z0-9]
	\s --> space
	\n --> new line
	\t --> tab
	. --> any char
	\W --> negation of \w
	\S --> negation of \s
	\D --> negation of \d
	| --> OR between expressions
	
	Quantifier: (associated to a metachar or a group or a class)
	
	+ --> 1 or more
	* --> 0 or more
	? --> 0 or 1
	{min,max}
	{qta}
	
	Position:
	
	^ --> beginning of line or string
	$ --> end of line or string
	\b --> word (bound \s)
	\> --> end of a word
	\< --> beginning of a word
	  
	TCL command:
	
	regexp {reg} $stringTOcheck \
	  stringTOsaveIFmatch groupVAR1..2..N]
	:returns 1 if there's a match
	  
	ex: set isMatch [regexp {HS65_L([S|L|H])_([A-Z]+)([0-9]+)X([0-9]+)} $line \
	  matchVar threshold name n_inputs strength]	


8) Files:

	TCL commands:
	
	open filename ?mode? ?permission? --> open a file (if file \
		doesn't exist then is created) with specified mode {r|w} and \
		permission 
		es: set fd [open "file.test" "r"]
		es: set fd [open {file.file} {w}]
				puts  $fd "hello world" 
	
	gets ?channelID? ?varName? --> reads a line from file
		return: number of chars read
	es: set fd [open "file.file?\" "r"]
			while {[gets $fd line] >=0} {
				puts "$line"
			}
	
	close $fd --> close file $fd
